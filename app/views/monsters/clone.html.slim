=form_for @monster do |f|
  div class='form-group'
    .form-group
      =f.hidden_field :job_id, value: "#{@monster.job_id}"
      =f.hidden_field :element_id, value: "#{@monster.element_id}"
      =f.hidden_field :name, value: "#{@monster.name}"
      =f.hidden_field :max_hp, value: "#{@monster.max_hp}"
      =f.hidden_field :is_template, :value => false
      /this sets the monster to being a template
      =f.hidden_field :created_from_id, :value => "#{@monster.id}"
      .form-control=f.label "Currently sending a hidden field user_id 1 because User broken"
      =f.hidden_field :user_id, :value => 1
      =f.label "Select Your Monsters Skin!"
      .form-control =f.collection_select :monster_skin_id, MonsterSkin.all, :id, :name
      h5 Equip an ability for this monster!(Have not set a limit to summoner level yet, will need to add a where check that looks at current_user.summoner.current_lvl)
      .form-control=f.select :ability_ids, Ability.where(job_id: "#{@monster.job_id}").collect {|x| ["Ability:" + x.name + ", AP cost:" + x.ap_cost.to_s + ", Lvl required:" + x.min_level.to_s + ", Description: " + x.description, x.id]}, {}, :multiple => true
      / .form-control=f.select :ability_ids, Ability.where(job_id: "#{@monster.job_id}").collect {|x| ["Ability:" + x.name + ", AP cost:" + x.ap_cost.to_s + ", Lvl required:" + x.min_level.to_s + ", Description: " + x.description, x.id]}, {}, :multiple => false
      hr=f.submit class: 'btn btn-primary'