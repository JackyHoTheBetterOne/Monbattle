/ AbilityEquipping check on socket
-@ability_equipping_for_socket = monster.monster_unlocks.where(user_id: @user).first.ability_equippings.where(ability_id: Ability.where(abil_socket_id: AbilSocket.find_by_socket_num(slot).id).pluck(:id))
/ Ability equipped for socket
-@socket_ability = (@ability_equipping_for_socket.empty? ? [] : @ability_equipping_for_socket.first.ability)
/ Find all abilities available for this users monsters socket
-@equippable_abilities = Ability.where(abil_socket_id: AbilSocket.find_by_socket_num(slot).id).where(id: @user.ability_purchases.pluck(:ability_id)).where(id: monster.job.ability_restrictions.pluck(:ability_id))

/ is the socket slot empty for this users monster
-if @ability_equipping_for_socket.empty?
  h4 Nothing Equipped in Socket #{slot}!
  .btn-group
    button.btn.dropdown-toggle data-toggle="dropdown" type="button"
      | Equip Socket #{slot}
      span.caret
    ul.dropdown-menu role="menu"
      -@equippable_abilities.each do |ability|
        li= link_to "#{ability.name}", ability_equippings_path({ability_equipping: {user_id: @user, ability_id: ability, party_id: @party, monster_id: monster, monster_unlock_id: monster.monster_unlocks.where(user_id: @user).first}}), method: :post, remote: true
        li.divider
-else
  h4 Ability Equipped: #{@socket_ability.name}
  ul
    li
      | Target: #{@socket_ability.target.name}
        li
          | Element: #{@socket_ability.element.name}
            li
              | Stat Effected: #{@socket_ability.stat_target.name}
                li
                  | How much Stat is Changed: #{@socket_ability.stat_change}
  -@socket_ability.effects.each do |effect|
    ul type="square"
      li
        h5
          | Additions Effects: #{effect.name}
        ul
          li
            | Target: #{effect.target.name}
            li
              |  Element: #{effect.element.name}
              li
                | Stat Effected: #{effect.stat_target.name}
                li
                  | How much the Stat is Changed: #{effect.stat_change}
  .btn-group
    button.btn.dropdown-toggle data-toggle="dropdown" type="button"
      | Change Equipped Ability in socket #{slot}
      span.caret
    ul.dropdown-menu role="menu"
      -@equippable_abilities.each do |ability|
        li= link_to "#{ability.name}", ability_equipping_path(@ability_equipping_for_socket.first, {ability_equipping: {user_id: @user, ability_id: ability, party_id: @party, monster_id: monster, monster_unlock_id: monster.monster_unlocks.where(user_id: @user).first}}), method: :patch, remote: true
        li.divider
